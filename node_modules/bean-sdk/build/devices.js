'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var util = require('./util/util');
var BleServices = require('./services/services');
var async = require('async');
var logger = require('./util/logs').logger;

// Device types
var DEVICE_TYPE_LIGHT_BLUE = 'DEVICE_TYPE_LIGHT_BLUE';
var DEVICE_TYPE_BLE = 'DEVICE_TYPE_BLE';

var BEAN_UUID = util.normalizeUUID('a495ff10c5b14b44b5121370f02d74de');

var PeripheralMixin = function () {
  function PeripheralMixin(peripheral) {
    _classCallCheck(this, PeripheralMixin);

    this._peripheral = peripheral;
  }

  _createClass(PeripheralMixin, [{
    key: 'update',
    value: function update(peripheral) {
      this._peripheral = peripheral;
      return true;
    }
  }, {
    key: 'getPeripheral',
    value: function getPeripheral() {
      return this._peripheral;
    }
  }, {
    key: 'getName',
    value: function getName() {
      var adv = this._peripheral.advertisement;
      return adv.localName ? adv.localName : '';
    }
  }, {
    key: 'getAddress',
    value: function getAddress() {
      return this._peripheral.uuid;
    }
  }]);

  return PeripheralMixin;
}();

var ScannedDevice = function (_PeripheralMixin) {
  _inherits(ScannedDevice, _PeripheralMixin);

  function ScannedDevice(peripheral) {
    _classCallCheck(this, ScannedDevice);

    var _this = _possibleConstructorReturn(this, (ScannedDevice.__proto__ || Object.getPrototypeOf(ScannedDevice)).call(this, peripheral));

    _this._advertisedServices = [];
    _this._reportAtLeastOnce = false;
    return _this;
  }

  _createClass(ScannedDevice, [{
    key: 'print',
    value: function print() {
      var out = this.getType() + ':\n';
      out += '    Name: ' + this.getName() + '\n';
      out += '    Address: ' + this.getAddress() + '\n';
      out += '    Advertised Services:\n';
      if (this._advertisedServices.length > 0) {
        for (var i in this._advertisedServices) {
          out += '        ' + this._advertisedServices[i] + '\n';
        }
      } else {
        out += '        None\n';
      }
      return out;
    }
  }, {
    key: 'update',
    value: function update(peripheral) {
      this._peripheral = peripheral;

      var newServices = peripheral.advertisement.serviceUuids;
      var updated = false;
      for (var i in newServices) {
        var sUUID = newServices[i];
        if (this._advertisedServices.indexOf(sUUID) === -1) {
          updated = true;
          this._advertisedServices.push(sUUID);
        }
      }

      if (!this._reportAtLeastOnce) {
        this._reportAtLeastOnce = true;
        updated = true;
      }

      return updated;
    }
  }, {
    key: 'getType',
    value: function getType() {
      if (this._advertisedServices.indexOf(BEAN_UUID) < 0) {
        return DEVICE_TYPE_BLE;
      } else {
        return DEVICE_TYPE_LIGHT_BLUE;
      }
    }
  }]);

  return ScannedDevice;
}(PeripheralMixin);

var BleDevice = function (_PeripheralMixin2) {
  _inherits(BleDevice, _PeripheralMixin2);

  function BleDevice(peripheral) {
    _classCallCheck(this, BleDevice);

    // State
    var _this2 = _possibleConstructorReturn(this, (BleDevice.__proto__ || Object.getPrototypeOf(BleDevice)).call(this, peripheral));

    _this2._services = {};
    return _this2;
  }

  _createClass(BleDevice, [{
    key: '_lookupService',
    value: function _lookupService(serviceKey) {
      /**
       * Helper function to look up a service based on a key, with error logging
       */

      var s = this._services[serviceKey];
      if (s) return s;

      logger.info('No such service: ' + serviceKey);
      return null;
    }
  }, {
    key: 'getType',
    value: function getType() {
      return DEVICE_TYPE_BLE;
    }
  }, {
    key: 'getServices',
    value: function getServices() {
      return this._services;
    }
  }, {
    key: 'getDeviceInformationService',
    value: function getDeviceInformationService() {
      return this._lookupService(BleServices.deviceInformation.UUID);
    }
  }, {
    key: 'getBatteryService',
    value: function getBatteryService() {
      return this._lookupService(BleServices.battery.UUID);
    }
  }, {
    key: 'getOADService',
    value: function getOADService() {
      return this._lookupService(BleServices.oad.UUID);
    }
  }, {
    key: 'getSerialTransportService',
    value: function getSerialTransportService() {
      return this._lookupService(BleServices.serialTransport.UUID);
    }
  }, {
    key: 'getScratchService',
    value: function getScratchService() {
      return this._lookupService(BleServices.scratch.UUID);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.getName() + '(' + this.getAddress() + ')';
    }
  }, {
    key: 'serialize',
    value: function serialize() {
      return {
        name: this.getName(),
        address: this.getAddress(),
        device_type: this.getType()
      };
    }
  }, {
    key: 'isConnected',
    value: function isConnected() {
      return this._peripheral.state === 'connected';
    }
  }, {
    key: 'isConnectedOrConnecting',
    value: function isConnectedOrConnecting() {
      return this._peripheral.state === 'connected' || this._peripheral.state === 'connecting';
    }
  }, {
    key: 'connect',
    value: function connect(callback) {
      var _this3 = this;

      /**
       * Connect to the device
       *
       * @param callback Callback function that takes an error argument
       */
      logger.info('Connecting to device: ' + this.getName());
      if (this.isConnected()) {
        logger.info('Already connected.');
        callback(null, this);
      } else {
        this._peripheral.connect(function (err) {
          callback(err, _this3);
        });
      }
    }
  }, {
    key: 'disconnect',
    value: function disconnect(callback) {
      var _this4 = this;

      if (this.isConnected()) {
        this._peripheral.disconnect(function (error) {
          if (error) {
            logger.error('Device disconnect ERROR (' + _this4.toString() + ': ' + error);
          } else {
            logger.info('Device disconnect success (' + _this4.toString() + ')');
          }
          callback(error);
        });
      } else {
        callback(null);
      }
    }
  }, {
    key: 'lookupServices',
    value: function lookupServices(callback) {
      var _this5 = this;

      logger.info('Looking up services for device: ' + this.getName());

      this._services = []; // Clear services
      this._peripheral.discoverAllServicesAndCharacteristics(function (err, services) {
        if (err) {
          logger.info('There was an error getting services: ' + err);
          callback(err);
        } else {

          var setupFns = [];

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = services[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var nobleService = _step.value;

              var sUUID = util.normalizeUUID(nobleService.uuid);
              var service = null;
              if (_this5._services[sUUID]) {
                // Service exists
                service = BleServices.fromExistingService(_this5._services[sUUID], nobleService);
              } else {
                // New service
                service = BleServices.fromNobleService(nobleService);
              }
              logger.info('Found service: ' + service.getName() + ' / ' + nobleService.uuid);
              _this5._services[sUUID] = service;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          var _loop = function _loop(i) {
            var s = _this5._services[i];
            setupFns.push(function (setupCallback) {
              s.setup(function (setupError) {
                logger.info('Service setup successfully: ' + s.getName());
                setupCallback(setupError);
              });
            });
          };

          for (var i in _this5._services) {
            _loop(i);
          }

          async.parallel(setupFns, function (error, results) {
            logger.info('All services have been setup!');
            callback(error);
          });
        }
      });
    }
  }]);

  return BleDevice;
}(PeripheralMixin);

var LightBlueDevice = function (_BleDevice) {
  _inherits(LightBlueDevice, _BleDevice);

  function LightBlueDevice(peripheral) {
    _classCallCheck(this, LightBlueDevice);

    return _possibleConstructorReturn(this, (LightBlueDevice.__proto__ || Object.getPrototypeOf(LightBlueDevice)).call(this, peripheral));
  }

  _createClass(LightBlueDevice, [{
    key: 'getType',
    value: function getType() {
      return DEVICE_TYPE_LIGHT_BLUE;
    }
  }, {
    key: 'setLed',
    value: function setLed(red, green, blue, callback) {
      var cmd = BleServices.serialTransport.commandIds.CC_LED_WRITE_ALL;
      this.getSerialTransportService().sendCommand(cmd, [red, green, blue], callback);
    }
  }, {
    key: 'readAccelerometer',
    value: function readAccelerometer(callback) {
      var cmd = BleServices.serialTransport.commandIds.CC_ACCEL_READ;
      this.getSerialTransportService().sendCommand(cmd, [], null, callback);
    }
  }, {
    key: 'readSketchInfo',
    value: function readSketchInfo(callback) {
      var cmd = BleServices.serialTransport.commandIds.BL_GET_META;
      this.getSerialTransportService().sendCommand(cmd, [], null, callback);
    }
  }, {
    key: 'readBleConfig',
    value: function readBleConfig(callback) {
      var cmd = BleServices.serialTransport.commandIds.BT_GET_CONFIG;
      this.getSerialTransportService().sendCommand(cmd, [], null, callback);
    }
  }, {
    key: 'sendSerial',
    value: function sendSerial(dataBuffer, callback) {
      var cmd = BleServices.serialTransport.commandIds.SERIAL_DATA;
      this.getSerialTransportService().sendCommand(cmd, [dataBuffer], callback);
    }
  }, {
    key: 'rename',
    value: function rename(newName, callback) {
      var _this7 = this;

      this.readBleConfig(function (err, existingCfg) {
        var cmd = BleServices.serialTransport.commandIds.BT_SET_CONFIG;

        var args = [existingCfg.advertising_interval, existingCfg.connection_interval, existingCfg.tx_power, existingCfg.advertising_mode, existingCfg.ibeacon_uuid, existingCfg.ibeacon_major_id, existingCfg.ibeacon_minor_id, newName, newName.length];

        _this7.getSerialTransportService().sendCommand(cmd, args, callback);
      });
    }
  }]);

  return LightBlueDevice;
}(BleDevice);

module.exports = {
  ScannedDevice: ScannedDevice,
  BleDevice: BleDevice,
  LightBlueDevice: LightBlueDevice,
  DEVICE_TYPE_LIGHT_BLUE: DEVICE_TYPE_LIGHT_BLUE,
  DEVICE_TYPE_BLE: DEVICE_TYPE_BLE
};