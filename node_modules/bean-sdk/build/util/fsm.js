'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var logger = require('./logs').logger;

var Context = function () {
  function Context() {
    _classCallCheck(this, Context);

    this.states = {};
    this.state = null;
  }

  _createClass(Context, [{
    key: 'initStates',
    value: function initStates(states) {
      for (var key in states) {
        if (states.hasOwnProperty(key)) {
          var kls = states[key];
          this.states[key] = new kls(key, this);
        }
      }
    }
  }, {
    key: 'setState',
    value: function setState(stateKey) {
      var oldState = this.state;
      var newState = this.states[stateKey];

      if (oldState === newState) {
        logger.info('Same state transition');
      } else {
        this.state = newState;
        var oldStateKey = oldState !== null ? oldState.key : null;
        logger.info('State transition: ' + oldStateKey + ' -> ' + newState.key);

        if (oldState) {
          oldState.exitState();
        }

        if (this.state) {
          this.state.enterState(oldStateKey);
        }
      }
    }
  }]);

  return Context;
}();

var State = function () {
  function State(key, context) {
    _classCallCheck(this, State);

    this.key = key;
    this.ctx = context;
  }

  _createClass(State, [{
    key: 'enterState',
    value: function enterState() {}
  }, {
    key: 'exitState',
    value: function exitState() {}
  }]);

  return State;
}();

module.exports = {
  Context: Context,
  State: State
};