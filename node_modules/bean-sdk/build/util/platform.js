'use strict';

var spawn = require('child_process').spawn;

var PLATFORM_OSX = 'darwin';
var PLATFORM_FREEBSD = 'freebsd';
var PLATFORM_LINUX = 'linux';
var PLATFORM_SUNOS = 'sunos';
var PLATFORM_WINDOWS = 'win32';

function lineEnding() {
  if (process.platform == PLATFORM_WINDOWS) {
    return '\r\n';
  } else {
    return '\n';
  }
}

function userHome() {
  return process.env[process.platform == PLATFORM_WINDOWS ? 'USERPROFILE' : 'HOME'];
}

function runCli(program, args, callback) {
  var cmd = spawn(program, args);

  cmd.on('close', function (code) {
    if (code != 0) {
      throw new Error('CLI command failed: ' + program);
    } else {
      callback();
    }
  });
}

function platformSpecificFn(functionMap) {
  var fn = functionMap[process.platform];
  if (fn) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return fn.apply(fn, args);
  } else {
    throw new Error('Platform not supported: ' + process.platform);
  }
}

module.exports = {
  lineEnding: lineEnding,
  userHome: userHome,
  cli: runCli,
  runFunction: platformSpecificFn,
  OSX: PLATFORM_OSX,
  FREEBSD: PLATFORM_FREEBSD,
  LINUX: PLATFORM_LINUX,
  SUNOS: PLATFORM_SUNOS,
  WINDOWS: PLATFORM_WINDOWS
};