'use strict';
'use static';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var buffer = require('buffer');

var BinaryField = function () {
  _createClass(BinaryField, null, [{
    key: 'fromBuffer',
    value: function fromBuffer(buf, offset, definition) {
      throw new Error("Subclasses must implement .fromBuffer(buf, offset, definition)");
    }
  }]);

  function BinaryField(value, defn) {
    _classCallCheck(this, BinaryField);

    this._value = value;
    this._defn = defn;
  }

  _createClass(BinaryField, [{
    key: 'getValue',
    value: function getValue() {
      return this._value;
    }
  }, {
    key: 'pack',
    value: function pack() {
      throw new Error("Subclasses must implement .pack()");
    }
  }, {
    key: 'size',
    value: function size() {
      throw new Error("Subclasses must implement .size()");
    }
  }]);

  return BinaryField;
}();

var UInt8 = function (_BinaryField) {
  _inherits(UInt8, _BinaryField);

  function UInt8() {
    _classCallCheck(this, UInt8);

    return _possibleConstructorReturn(this, (UInt8.__proto__ || Object.getPrototypeOf(UInt8)).apply(this, arguments));
  }

  _createClass(UInt8, [{
    key: 'pack',
    value: function pack() {
      var buf = new buffer.Buffer(1);
      buf.writeUInt8(this._value, 0);
      return buf;
    }
  }, {
    key: 'size',
    value: function size() {
      return 1;
    }
  }], [{
    key: 'fromBuffer',
    value: function fromBuffer(buf, offset, definition) {
      return new UInt8(buf.readUInt8(offset), definition);
    }
  }]);

  return UInt8;
}(BinaryField);

var UInt16 = function (_BinaryField2) {
  _inherits(UInt16, _BinaryField2);

  function UInt16() {
    _classCallCheck(this, UInt16);

    return _possibleConstructorReturn(this, (UInt16.__proto__ || Object.getPrototypeOf(UInt16)).apply(this, arguments));
  }

  _createClass(UInt16, [{
    key: 'pack',
    value: function pack() {
      var buf = new buffer.Buffer(2);
      buf.writeUInt16LE(this._value, 0);
      return buf;
    }
  }, {
    key: 'size',
    value: function size() {
      return 2;
    }
  }], [{
    key: 'fromBuffer',
    value: function fromBuffer(buf, offset, definition) {
      return new UInt16(buf.readUInt16LE(offset), definition);
    }
  }]);

  return UInt16;
}(BinaryField);

var UInt32 = function (_BinaryField3) {
  _inherits(UInt32, _BinaryField3);

  function UInt32() {
    _classCallCheck(this, UInt32);

    return _possibleConstructorReturn(this, (UInt32.__proto__ || Object.getPrototypeOf(UInt32)).apply(this, arguments));
  }

  _createClass(UInt32, [{
    key: 'pack',
    value: function pack() {
      var buf = new buffer.Buffer(4);
      buf.writeUInt32LE(this._value, 0);
      return buf;
    }
  }, {
    key: 'size',
    value: function size() {
      return 4;
    }
  }], [{
    key: 'fromBuffer',
    value: function fromBuffer(buf, offset, definition) {
      return new UInt32(buf.readUInt32LE(offset), definition);
    }
  }]);

  return UInt32;
}(BinaryField);

var Int16 = function (_BinaryField4) {
  _inherits(Int16, _BinaryField4);

  function Int16() {
    _classCallCheck(this, Int16);

    return _possibleConstructorReturn(this, (Int16.__proto__ || Object.getPrototypeOf(Int16)).apply(this, arguments));
  }

  _createClass(Int16, [{
    key: 'pack',
    value: function pack() {
      var buf = new buffer.Buffer(2);
      buf.writeInt16LE(this._value, 0);
      return buf;
    }
  }, {
    key: 'size',
    value: function size() {
      return 2;
    }
  }], [{
    key: 'fromBuffer',
    value: function fromBuffer(buf, offset, definition) {
      return new Int16(buf.readInt16LE(offset), definition);
    }
  }]);

  return Int16;
}(BinaryField);

var PaddedString = function (_BinaryField5) {
  _inherits(PaddedString, _BinaryField5);

  function PaddedString() {
    _classCallCheck(this, PaddedString);

    return _possibleConstructorReturn(this, (PaddedString.__proto__ || Object.getPrototypeOf(PaddedString)).apply(this, arguments));
  }

  _createClass(PaddedString, [{
    key: 'pack',
    value: function pack() {
      var buf = new buffer.Buffer(this._defn.length);
      if (this._defn.pad_char) {
        buf.fill(this._defn.pad_char);
      } else {
        buf.fill(0);
      }
      buf.write(this._value, 0, this._defn.length);
      return buf;
    }
  }, {
    key: 'size',
    value: function size() {
      return this._defn.length;
    }
  }], [{
    key: 'fromBuffer',
    value: function fromBuffer(buf, offset, definition) {
      var strBuf = buf.slice(offset, definition.length + offset);
      return new PaddedString(strBuf.toString('ascii'), definition);
    }
  }]);

  return PaddedString;
}(BinaryField);

var VariableLengthBytes = function (_BinaryField6) {
  _inherits(VariableLengthBytes, _BinaryField6);

  function VariableLengthBytes() {
    _classCallCheck(this, VariableLengthBytes);

    return _possibleConstructorReturn(this, (VariableLengthBytes.__proto__ || Object.getPrototypeOf(VariableLengthBytes)).apply(this, arguments));
  }

  _createClass(VariableLengthBytes, [{
    key: 'pack',
    value: function pack() {
      return this._value;
    }
  }, {
    key: 'size',
    value: function size() {
      return this._value.length;
    }
  }], [{
    key: 'fromBuffer',
    value: function fromBuffer(buf, offset, definition) {
      return new VariableLengthBytes(buf, definition);
    }
  }]);

  return VariableLengthBytes;
}(BinaryField);

var FixedLengthBytes = function (_BinaryField7) {
  _inherits(FixedLengthBytes, _BinaryField7);

  function FixedLengthBytes() {
    _classCallCheck(this, FixedLengthBytes);

    return _possibleConstructorReturn(this, (FixedLengthBytes.__proto__ || Object.getPrototypeOf(FixedLengthBytes)).apply(this, arguments));
  }

  _createClass(FixedLengthBytes, [{
    key: 'pack',
    value: function pack() {
      return this._value; // Already a buffer!
    }
  }, {
    key: 'size',
    value: function size() {
      return this._defn.length;
    }
  }], [{
    key: 'fromBuffer',
    value: function fromBuffer(buf, offset, definition) {
      var binBuf = buf.slice(offset, definition.length + offset);
      return new FixedLengthBytes(binBuf, definition);
    }
  }]);

  return FixedLengthBytes;
}(BinaryField);

module.exports = {
  UInt8: UInt8,
  UInt16: UInt16,
  UInt32: UInt32,
  Int16: Int16,
  PaddedString: PaddedString,
  FixedLengthBytes: FixedLengthBytes,
  VariableLengthBytes: VariableLengthBytes
};