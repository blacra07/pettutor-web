'use strict';

var fs = require('fs-extra');
var os = require('os');
var paths = require('../../util/paths');
var platform = require('../../util/platform');
var util = require('../../util/util');
var path = require('path');
var common = require('./common');

function arduinoHardwarePath(arduinoFolder) {
  var fnMap = {};
  fnMap[platform.OSX] = function () {
    return path.join(arduinoFolder, 'Contents', 'java', 'hardware', 'LightBlue-Bean');
  };
  fnMap[platform.WINDOWS] = function () {
    return path.join(arduinoFolder, 'hardware', 'LightBlue-Bean');
  };
  fnMap[platform.LINUX] = function () {
    return path.join(arduinoFolder, 'hardware', 'LightBlue-Bean');
  };
  return platform.runFunction(fnMap);
}

function arduinoExamplesPath(arduinoFolder) {
  var fnMap = {};
  fnMap[platform.OSX] = function () {
    return path.join(arduinoFolder, 'Contents', 'java', 'examples', 'LightBlue-Bean');
  };
  fnMap[platform.WINDOWS] = function () {
    return path.join(arduinoFolder, 'examples', 'LightBlue-Bean');
  };
  fnMap[platform.LINUX] = function () {
    return path.join(arduinoFolder, 'examples', 'LightBlue-Bean');
  };
  return platform.runFunction(fnMap);
}

function arduinoToolsPath(arduinoFolder) {
  var fnMap = {};
  fnMap[platform.OSX] = function () {
    return path.join(arduinoFolder, 'Contents', 'java', 'hardware', 'tools', 'bean');
  };
  fnMap[platform.WINDOWS] = function () {
    return path.join(arduinoFolder, 'hardware', 'tools', 'bean');
  };
  fnMap[platform.LINUX] = function () {
    return path.join(arduinoFolder, 'hardware', 'tools', 'bean');
  };
  return platform.runFunction(fnMap);
}

function openArduinoApp(arduinoInstallPath, callback) {

  try {
    fs.accessSync(arduinoInstallPath);
  } catch (e) {
    throw new Error('Path does not exist: ' + arduinoInstallPath);
  }

  if (process.platform != platform.OSX) {
    console.log('Please re-open the Arduino app manually!');
    callback();
    return;
  }

  if (arduinoInstallPath.endsWith('/')) {
    arduinoInstallPath = arduinoInstallPath.slice(0, -1);
  }

  var fnMap = {};
  fnMap[platform.OSX] = function () {
    return ['open', [arduinoInstallPath]];
  };
  var result = platform.runFunction(fnMap);
  var program = result[0];
  var args = result[1];

  platform.cli(program, args, function () {
    console.log('Arduino app opened successfully');
    callback();
  });
}

function unzip(tarball, location, callback) {
  var fnMap = {};
  fnMap[platform.OSX] = function () {
    return ['tar', ['-xzvf', tarball, '-C', location]];
  };
  var result = platform.runFunction(fnMap);
  var program = result[0];
  var args = result[1];

  platform.cli(program, args, function () {
    callback(path.join(location, 'bean-arduino-core'));
  });
}

function createConfigFile(userHome, compiledSketchLocation) {

  // TODO: Finish me, for now we are hardcoding compiledSketchLocation
  var beanConfigFolder = path.join(userHome, 'bean');
  var beanConfigFile = path.join(beanConfigFolder, 'bean-sdk.cfg');
  fs.mkdirsSync(beanConfigFolder);
  var jsonOut = '{"arduino_config_file": "' + compiledSketchLocation + '"}' + platform.lineEnding();
  fs.writeFileSync(beanConfigFile, jsonOut);
}

function installBeanArduinoCore(completedCallback) {

  var fnMap = {};
  fnMap[platform.OSX] = function () {
    return '/Applications/Arduino.app/';
  };
  fnMap[platform.WINDOWS] = function () {
    return 'C:\\Program Files(x86)\\Arduino\\';
  };
  fnMap[platform.LINUX] = function () {
    return '/home/user/Arduino/';
  };
  var example = platform.runFunction(fnMap);

  util.userInput.question('\nWhere is Arduino core installed? (ex. ' + example + ')\nPath:', function (arduinoInstallPath) {

    openArduinoApp(arduinoInstallPath, function () {

      var beanArduinoCore = paths.getResourceGlob('bean-arduino-core');

      // Make sure COMPILED_BEAN_LOCATION exists
      common.cleanSketchFolder();

      // Install bean-arduino-core
      var arduinoHardwareFolder = arduinoHardwarePath(arduinoInstallPath);
      var beanCoreHardwareFolder = path.join(beanArduinoCore, 'hardware', 'LightBlue-Bean', 'bean');
      fs.mkdirsSync(arduinoHardwareFolder);
      fs.copySync(beanCoreHardwareFolder, arduinoHardwareFolder);

      // Install examples
      var arduinoExamplesFolder = arduinoExamplesPath(arduinoInstallPath);
      var beanCoreExamplesFolder = path.join(beanArduinoCore, 'examples', 'LightBlue-Bean');
      fs.mkdirsSync(arduinoExamplesFolder);
      fs.copySync(beanCoreExamplesFolder, arduinoExamplesFolder);

      // Install post_compile script
      var arduinoToolsFolder = arduinoToolsPath(arduinoInstallPath);
      var arduinoPostCompilePath = path.join(arduinoToolsFolder, 'post_compile');
      var localPostCompilePath = paths.getResource('post_compile');
      fs.mkdirsSync(arduinoToolsFolder);
      fs.copySync(localPostCompilePath, arduinoPostCompilePath);

      console.log('Bean Arduino core installed.');
      completedCallback(null);
      rl.close();
    });
  });
}

module.exports = {
  installBeanArduinoCore: installBeanArduinoCore
};