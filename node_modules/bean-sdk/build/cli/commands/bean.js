'use strict';

var common = require('./common');
var commandIds = require('../../command-definitions').commandIds;
var sleep = require('sleep');
var async = require('async');
var sprintf = require('sprintf-js').sprintf;
var buffer = require('buffer');

function blinkLed(sdk, beanName, beanAddress, completedCallback) {

  common.connectToDevice(sdk, beanName, beanAddress, function (device) {
    console.log('Turning LED on...');
    device.setLed(255, 0, 255, function (err) {
      if (err) throw new Error(err);

      console.log('Waiting for 3 seconds...');
      sleep.sleep(3);
      console.log('Turning LED off...');
      device.setLed(0, 0, 0, function (err) {
        if (err) throw new Error(err);

        completedCallback(null);
      });
    });
  }, completedCallback);
}

function readAccel(sdk, beanName, beanAddress, completedCallback) {

  common.connectToDevice(sdk, beanName, beanAddress, function (device) {

    async.timesSeries(30, function (n, next) {
      device.readAccelerometer(function (err, response) {
        var xOut = sprintf("X: %-10s", response.x_axis);
        var yOut = sprintf("Y: %-10s", response.y_axis);
        var zOut = sprintf("Z: %-10s", response.z_axis);
        var out = '' + xOut + yOut + zOut;
        console.log(out);
        sleep.usleep(500000);
        next();
      });
    }, function (err, results) {
      // All done
      completedCallback(null);
    });
  }, completedCallback);
}

function readConfig(sdk, beanName, beanAddress, completedCallback) {

  common.connectToDevice(sdk, beanName, beanAddress, function (device) {
    device.readBleConfig(function (err, response) {
      var out = "";
      out += '    Advertising Interval: ' + response.advertising_interval + '\n';
      out += '     Connection Interval: ' + response.connection_interval + '\n';
      out += '                Tx Power: ' + response.tx_power + '\n';
      out += '        Advertising Mode: ' + response.advertising_mode + '\n';
      out += '            iBeacon UUID: ' + response.ibeacon_uuid + '\n';
      out += '        iBeacon Major ID: ' + response.ibeacon_major_id + '\n';
      out += '        iBeacon Minor ID: ' + response.ibeacon_minor_id + '\n';
      out += '              Local Name: ' + response.local_name + '\n';
      console.log(out);
      completedCallback(null);
    });
  }, completedCallback);
}

function _getVoltage(device, callback) {
  var batt = device.getBatteryService();
  if (batt) {
    batt.getVoltage(function (err, battVoltage) {
      if (err) log.error(err);
      callback(battVoltage);
    });
  } else {
    callback('No Battery Service');
  }
}

function _getSketch(device, callback) {
  var serial = device.getSerialTransportService();
  if (serial) {
    device.readSketchInfo(function (err, sketchInfo) {
      if (err) log.error(err);
      callback(sketchInfo.sketch_name.substring(0, sketchInfo.sketch_name_size));
    });
  } else {
    callback('No Serial Transport Service');
  }
}

function readDeviceInfo(sdk, beanName, beanAddress, completedCallback) {

  common.connectToDevice(sdk, beanName, beanAddress, function (device) {
    var dis = device.getDeviceInformationService();
    dis.serialize(function (err, info) {
      if (err) {
        completedCallback(err);
      } else {
        _getVoltage(device, function (voltage) {
          _getSketch(device, function (sketch) {
            var out = "";
            out += '      Manufacturer: ' + info.manufacturer_name + '\n';
            out += '      Model Number: ' + info.model_number + '\n';
            out += '  Hardware Version: ' + info.hardware_version + '\n';
            out += '  Firmware Version: ' + info.firmware_version + '\n';
            out += '     Battery Level: ' + voltage + '\n';
            out += '       Sketch Name: ' + sketch + '\n';
            console.log(out);

            completedCallback(null);
          });
        });
      }
    });
  }, completedCallback);
}

function logSerial(sdk, beanName, beanAddress, completedCallback) {
  common.connectToDevice(sdk, beanName, beanAddress, function (device) {
    console.log('Logging serial data...');
    console.log('');
    device.getSerialTransportService().registerForCommandNotification(commandIds.SERIAL_DATA, function (serialCmd) {
      process.stdout.write('' + serialCmd.data);
    });
  }, completedCallback);
}

function sendSerial(sdk, data, binary, beanName, beanAddress, completedCallback) {

  // Parse data into buffer
  var buf = void 0;

  if (binary === true) {
    // Interpret as hex digits
    buf = new buffer.Buffer(data, 'hex');
  } else {
    // Ascii
    buf = new buffer.Buffer(data, 'ascii');
  }

  common.connectToDevice(sdk, beanName, beanAddress, function (device) {
    device.sendSerial(buf, function (err) {
      if (err) throw new Error(err);

      completedCallback(null);
    });
  }, completedCallback);
}

function rename(sdk, newName, beanName, beanAddress, completedCallback) {

  common.connectToDevice(sdk, beanName, beanAddress, function (device) {
    console.log('Renaming Bean to: ' + newName);
    device.rename(newName, completedCallback);
  }, completedCallback);
}

function writeScratch(sdk, bank, data, binary, beanName, beanAddress, completedCallback) {

  // Parse data into buffer
  var buf = void 0;

  if (binary === true) {
    // Interpret as hex digits
    buf = new buffer.Buffer(data, 'hex');
  } else {
    // Ascii
    buf = new buffer.Buffer(data, 'ascii');
  }

  common.connectToDevice(sdk, beanName, beanAddress, function (device) {
    console.log('Writing to scratch bank ' + bank + ': ' + buf);
    device.getScratchService().writeScratch(bank, buf, completedCallback);
  }, completedCallback);
}

function readScratch(sdk, bank, beanName, beanAddress, completedCallback) {
  common.connectToDevice(sdk, beanName, beanAddress, function (device) {
    device.getScratchService().readScratch(parseInt(bank, 10), function (err, buf) {
      console.log('');
      console.log('Scratch bank ' + bank + ' value: ' + buf);
      completedCallback(err);
    });
  }, completedCallback);
}

module.exports = {
  blinkLed: blinkLed,
  readAccel: readAccel,
  readConfig: readConfig,
  readDeviceInfo: readDeviceInfo,
  logSerial: logSerial,
  sendSerial: sendSerial,
  rename: rename,
  writeScratch: writeScratch,
  readScratch: readScratch
};