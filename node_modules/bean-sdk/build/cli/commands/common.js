'use strict';

var platform = require("../../util/platform");
var path = require('path');
var fs = require('fs-extra');

var SKETCH_LOCATION = path.join(platform.userHome(), '.beansketches');
var SKETCH_LOCATION_BEAN = path.join(SKETCH_LOCATION, 'bean');
var SKETCH_LOCATION_BEANPLUS = path.join(SKETCH_LOCATION, 'beanplus');

function cleanSketchFolder() {
  fs.emptyDirSync(SKETCH_LOCATION);
  fs.emptyDirSync(SKETCH_LOCATION_BEAN);
  fs.emptyDirSync(SKETCH_LOCATION_BEANPLUS);
}

function connectToDevice(sdk, name, address, successCallback, errorCallback) {
  var filter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;


  if (!name && !address) {
    errorCallback("Please provide bean name or address");
  }

  var found = false;

  sdk.startScanning(15, filter, function () {
    // Scan timeout
    if (!found) {
      errorCallback('No bean found!');
    }
  });

  sdk.on('discover', function (scannedDevice) {
    if (scannedDevice.getName() === name || scannedDevice.getAddress() === address) {

      console.log('\nFound device with name/address: ' + scannedDevice.getName() + '/' + scannedDevice.getAddress());
      found = true;
      sdk.stopScanning();
      sdk.connectScannedDevice(scannedDevice, function (err, device) {

        if (err) {
          errorCallback('Bean connection failed: ' + err);
          return;
        }

        device.lookupServices(function (err) {

          if (err) {
            errorCallback('Service lookup FAILED: ' + err);
          } else {
            console.log('Connected!\n');
            successCallback(device);
          }
        });
      });
    }
  });
}

module.exports = {
  connectToDevice: connectToDevice,
  cleanSketchFolder: cleanSketchFolder,
  SKETCH_LOCATION_BEAN: SKETCH_LOCATION_BEAN,
  SKETCH_LOCATION_BEANPLUS: SKETCH_LOCATION_BEANPLUS
};