'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BleService = require('./base');
var util = require('../util/util');
var async = require('async');
var logger = require('../util/logs').logger;

var UUID_SERVICE_DEVICE_INFORMATION = util.normalizeUUID('180A');

var UUID_CHAR_SOFTWARE_VERSION = util.normalizeUUID('2A28');
var UUID_CHAR_FIRMWARE_VERSION = util.normalizeUUID('2A26');
var UUID_CHAR_HARDWARE_VERSION = util.normalizeUUID('2A27');
var UUID_CHAR_MFG_NAME = util.normalizeUUID('2A29');
var UUID_CHAR_MODEL_NUMBER = util.normalizeUUID('2A24');

/**
 * Standard BLE Device Information Service
 */

var DeviceInformationService = function (_BleService) {
  _inherits(DeviceInformationService, _BleService);

  function DeviceInformationService() {
    _classCallCheck(this, DeviceInformationService);

    return _possibleConstructorReturn(this, (DeviceInformationService.__proto__ || Object.getPrototypeOf(DeviceInformationService)).apply(this, arguments));
  }

  _createClass(DeviceInformationService, [{
    key: 'getManufacturerName',
    value: function getManufacturerName(callback) {
      this._performCachedLookup(UUID_CHAR_MFG_NAME, callback);
    }
  }, {
    key: 'getModelNumber',
    value: function getModelNumber(callback) {
      this._performCachedLookup(UUID_CHAR_MODEL_NUMBER, callback);
    }
  }, {
    key: 'getHardwareVersion',
    value: function getHardwareVersion(callback) {
      this._performCachedLookup(UUID_CHAR_HARDWARE_VERSION, callback);
    }
  }, {
    key: 'getFirmwareVersion',
    value: function getFirmwareVersion(callback) {
      this._performCachedLookup(UUID_CHAR_FIRMWARE_VERSION, callback);
    }
  }, {
    key: 'getSoftwareVersion',
    value: function getSoftwareVersion(callback) {
      this._performCachedLookup(UUID_CHAR_SOFTWARE_VERSION, callback);
    }
  }, {
    key: 'serialize',
    value: function serialize(finalCallback) {
      var _this2 = this;

      var ctx = this;

      var lookup = function lookup(fn, cb) {
        fn.apply(ctx, [function (err, result) {
          var val = void 0;
          if (err) {
            val = "Lookup error";
          } else {
            val = result === undefined ? '' : result.toString('utf8');
          }
          cb(null, val);
        }]);
      };

      async.parallel([
      // Have to wrap these with fat arrows to conserve `this` context
      function (cb) {
        return lookup(_this2.getManufacturerName, cb);
      }, function (cb) {
        return lookup(_this2.getModelNumber, cb);
      }, function (cb) {
        return lookup(_this2.getHardwareVersion, cb);
      }, function (cb) {
        return lookup(_this2.getFirmwareVersion, cb);
      }, function (cb) {
        return lookup(_this2.getSoftwareVersion, cb);
      }], function (err, results) {
        if (err) {
          logger.info(err);
          finalCallback(err, null);
        } else {
          finalCallback(null, {
            manufacturer_name: results[0],
            model_number: results[1],
            hardware_version: results[2],
            firmware_version: results[3],
            software_version: results[4]
          });
        }
      });
    }
  }]);

  return DeviceInformationService;
}(BleService);

module.exports = {
  DeviceInformationService: DeviceInformationService,
  UUID: UUID_SERVICE_DEVICE_INFORMATION
};