'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var buffer = require('buffer');
var BleService = require('./base');
var util = require('../util/util');
var async = require('async');
var logger = require('../util/logs').logger;

var UUID_SERVICE_OAD = util.normalizeUUID('F000FFC004514000B000000000000000');
var UUID_CHAR_OAD_IDENTIFY = util.normalizeUUID('F000FFC104514000B000000000000000');
var UUID_CHAR_OAD_BLOCK = util.normalizeUUID('F000FFC204514000B000000000000000');

var OADService = function (_BleService) {
  _inherits(OADService, _BleService);

  /**
   * Custom LightBlue OAD Service
   *
   * @param characteristics
   * @param nobleService
   */

  function OADService(characteristics, nobleService) {
    _classCallCheck(this, OADService);

    return _possibleConstructorReturn(this, (OADService.__proto__ || Object.getPrototypeOf(OADService)).call(this, characteristics, nobleService));
  }

  _createClass(OADService, [{
    key: '_writeZerosToIdentify',
    value: function _writeZerosToIdentify() {
      var zeros = new buffer.Buffer(16).fill(0);
      this._characteristics[UUID_CHAR_OAD_IDENTIFY].write(zeros, true, function (err) {
        if (err) {
          logger.info('Error: ' + err);
        } else {
          logger.info('Triggered a notification on Identify char');
        }
      });
    }
  }, {
    key: 'getName',
    value: function getName() {
      return 'OAD Service';
    }
  }, {
    key: 'setup',
    value: function setup(setupCallback) {
      var _this2 = this;

      logger.info('Setting up IDENTIFY and BLOCK notifications');

      async.parallel([function (callback) {
        _this2._setupNotification(UUID_CHAR_OAD_IDENTIFY, callback);
      }, function (callback) {
        _this2._setupNotification(UUID_CHAR_OAD_BLOCK, callback);
      }], function (error, results) {
        setupCallback(error);
      });
    }
  }, {
    key: 'triggerIdentifyHeaderNotification',
    value: function triggerIdentifyHeaderNotification() {
      this._writeZerosToIdentify();
    }
  }, {
    key: 'writeToIdentify',
    value: function writeToIdentify(buf, callback) {
      this._characteristics[UUID_CHAR_OAD_IDENTIFY].write(buf, true, callback);
    }
  }, {
    key: 'writeToBlock',
    value: function writeToBlock(buf, callback) {
      this._characteristics[UUID_CHAR_OAD_BLOCK].write(buf, true, callback);
    }
  }]);

  return OADService;
}(BleService);

module.exports = {
  OADService: OADService,
  UUID: UUID_SERVICE_OAD,
  characteristics: {
    IDENTIFY: UUID_CHAR_OAD_IDENTIFY,
    BLOCK: UUID_CHAR_OAD_BLOCK
  }
};