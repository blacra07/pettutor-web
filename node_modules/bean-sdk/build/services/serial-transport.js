'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BleService = require('./base');
var util = require('../util/util');
var commands = require('../command-definitions');
var buffer = require('buffer');
var logger = require('../util/logs').logger;

var LB_MAX_PACKET_LENGTH = 19;

var UUID_SERVICE_SERIAL_TRANSPORT = util.normalizeUUID('a495ff10c5b14b44b5121370f02d74de');
var UUID_CHAR_SERIAL_TRANSPORT = util.normalizeUUID('A495FF11C5B14B44B5121370F02D74DE');

var LightBluePacket = function () {
  _createClass(LightBluePacket, null, [{
    key: 'fromBuffer',
    value: function fromBuffer(buf) {
      var firstPacket = (buf[0] & 0x80) == 0x80;
      var packetCount = (buf[0] & 0x60) >> 5;
      var packetsRemaining = buf[0] & 0x1f;
      var payload = buf.slice(1, buf.length);
      return new LightBluePacket(firstPacket, packetCount, packetsRemaining, payload);
    }
  }]);

  function LightBluePacket(first, packetCount, packetsRemaining, payload) {
    _classCallCheck(this, LightBluePacket);

    if (payload.length > 19) {
      logger.info("Payload length cannot be greater than 19");
    }
    this._first = first;
    this._packetCount = packetCount;
    this._packetsRemaining = packetsRemaining;
    this._payload = payload;
  }

  _createClass(LightBluePacket, [{
    key: 'toString',
    value: function toString() {
      return 'LightBluePacket (First: ' + this._first + ') (Remaining: ' + this._packetsRemaining + ')';
    }
  }, {
    key: 'pack',
    value: function pack() {
      var headerBuf = new buffer.Buffer(1);
      var header = (this._first ? 0x80 : 0) | this._packetCount << 5 & 0x60 | this._packetsRemaining & 0x1f;
      headerBuf.writeUInt8(header, 0);
      return buffer.Buffer.concat([headerBuf, this._payload], headerBuf.length + this._payload.length);
    }
  }, {
    key: 'getPayload',
    value: function getPayload() {
      return this._payload;
    }
  }, {
    key: 'finalPacket',
    value: function finalPacket() {
      return this._packetsRemaining == 0;
    }
  }]);

  return LightBluePacket;
}();

var SerialTransportService = function (_BleService) {
  _inherits(SerialTransportService, _BleService);

  /**
   * Custom LightBlue Serial Transport Service
   *
   * @param characteristics
   * @param nobleService
   */

  function SerialTransportService(characteristics, nobleService) {
    _classCallCheck(this, SerialTransportService);

    var _this = _possibleConstructorReturn(this, (SerialTransportService.__proto__ || Object.getPrototypeOf(SerialTransportService)).call(this, characteristics, nobleService));

    _this._packetCount = 0;
    _this._outgoingPackets = [];
    _this._incomingPackets = [];
    _this._commandCallbacks = {};
    _this._responseCallbacks = {};
    _this._sendCallbacks = {};
    return _this;
  }

  _createClass(SerialTransportService, [{
    key: '_packetReceived',
    value: function _packetReceived(buf) {
      var packet = LightBluePacket.fromBuffer(buf);
      this._incomingPackets.push(packet);
      logger.debug('PACKET <<<: ' + packet.toString());

      if (packet.finalPacket()) {
        var packetPayloads = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this._incomingPackets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var p = _step.value;

            packetPayloads.push(p.getPayload());
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        var commandPayload = util.concatBuffers(packetPayloads);
        var incomingMessageId = commandPayload.readUInt16BE(2) & ~commands.MESSAGE_RESPONSE_BIT;
        var incomingCommandDefn = commands.definitions().incoming[incomingMessageId];
        var outgoingCommandDefn = commands.definitions().outgoing[incomingMessageId];
        if (incomingCommandDefn) {
          this._handleIncomingCommand(commandPayload, incomingCommandDefn);
        } else if (outgoingCommandDefn) {
          this._handleIncomingResponse(commandPayload, outgoingCommandDefn);
        } else {
          logger.warn('Couldn\'t find definition for command: ' + incomingMessageId);
        }

        this._incomingPackets = []; // Clear incoming packets
      }
    }
  }, {
    key: '_handleIncomingCommand',
    value: function _handleIncomingCommand(buf, defn) {
      var command = commands.Command.fromBuffer(buf, defn);
      if (command.getMessageId() === commands.commandIds.LB_PROTOCOL_ERROR) {
        // Handle protocol errors here, nobody else should need to register for this error
        var err = command.asObject();
        logger.error('LB PROTOCOL ERROR: expected ' + err.expected_header + ' got ' + err.received_header);
      } else {
        // Notify any registered callbacks of received command
        var commandCallback = this._commandCallbacks[command.getMessageId()];
        if (commandCallback) {
          commandCallback(command.asObject(command.getDefinition().arguments));
        }
      }
    }
  }, {
    key: '_handleIncomingResponse',
    value: function _handleIncomingResponse(buf, defn) {
      var response = commands.Response.fromBuffer(buf, defn);
      var callback = this._responseCallbacks[response.getMessageId()];
      if (callback) {
        callback(null, response.asObject(response.getDefinition().response));
      } else {
        logger.info('Got serial response (' + response.getMessageId() + ') but no callback!');
      }
    }
  }, {
    key: '_sendLightBluePackets',
    value: function _sendLightBluePackets(commandId) {
      var _this2 = this;

      var packet = this._outgoingPackets.shift();
      var packetData = packet.pack();
      logger.debug('PACKET >>>: ' + packet.toString());
      this._characteristics[UUID_CHAR_SERIAL_TRANSPORT].write(packetData, true, function (err) {
        if (err) {
          logger.error('ERROR sending LightBlue Packet: ' + err);
          _this2._sendCallbacks[commandId](err);
          _this2._outgoingPackets = [];
        }

        if (_this2._outgoingPackets.length != 0) {
          _this2._sendLightBluePackets(commandId);
        } else {
          var cb = _this2._sendCallbacks[commandId];
          if (cb) {
            _this2._sendCallbacks[commandId] = null;
            setTimeout(cb, 50, null);
          }
        }
      });
    }
  }, {
    key: 'getName',
    value: function getName() {
      return 'Serial Transport Service';
    }
  }, {
    key: 'setup',
    value: function setup(setupCallback) {
      var _this3 = this;

      logger.info('Setting up SERIAL notifications');

      this._setupNotification(UUID_CHAR_SERIAL_TRANSPORT, function (err) {
        setupCallback(err);
        _this3.registerForNotifications(UUID_CHAR_SERIAL_TRANSPORT, function (data) {
          _this3._packetReceived(data);
        });
      });
    }
  }, {
    key: 'registerForCommandNotification',
    value: function registerForCommandNotification(commandId, callback) {
      this._commandCallbacks[commandId] = callback;
    }
  }, {
    key: 'sendCommand',
    value: function sendCommand(commandId, payloadArguments, sendCallback, responseCallback) {
      /**
       * Send a LightBlue Command
       *
       * @param commandId int command ID
       * @param payloadArguments list of command arguments
       * @param completedCallback function called back when command is sent
       */

      // Pack the binary command
      var defn = commands.definitionForCommand(commandId);
      var command = new commands.Command(commandId, payloadArguments, defn);
      var commandPayload = command.pack();

      // Split the command into 1 or more LightBlue packets and queue them
      var numPackets = Math.ceil(commandPayload.length / LB_MAX_PACKET_LENGTH);
      this._packetCount = (this._packetCount + 1) % 4;

      for (var i = 0; i < numPackets; i++) {
        var offset = i * LB_MAX_PACKET_LENGTH;
        var packetPayload = commandPayload.slice(offset, offset + LB_MAX_PACKET_LENGTH);

        var first = false;
        if (i == 0) first = true;

        var packet = new LightBluePacket(first, this._packetCount, numPackets - (i + 1), packetPayload);
        this._outgoingPackets.push(packet);
      }

      if (sendCallback) {
        this._sendCallbacks[commandId] = sendCallback;
      }

      if (responseCallback) {
        this._responseCallbacks[commandId] = responseCallback;
      }

      this._sendLightBluePackets(commandId);
    }
  }]);

  return SerialTransportService;
}(BleService);

module.exports = {
  SerialTransportService: SerialTransportService,
  UUID: UUID_SERVICE_SERIAL_TRANSPORT,
  characteristics: {
    UUID_CHAR_SERIAL_TRANSPORT: UUID_CHAR_SERIAL_TRANSPORT
  },
  commandIds: commands.commandIds
};