'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BleService = require('./base');
var logger = require('../util/logs').logger;

var UUID_SERVICE_BATTERY = 0x180F;
var UUID_CHAR_BATTERY = 0x2A19;

/**
 * Standard BLE Battery Service
 */

var BatteryService = function (_BleService) {
  _inherits(BatteryService, _BleService);

  function BatteryService() {
    _classCallCheck(this, BatteryService);

    return _possibleConstructorReturn(this, (BatteryService.__proto__ || Object.getPrototypeOf(BatteryService)).apply(this, arguments));
  }

  _createClass(BatteryService, [{
    key: 'getVoltage',
    value: function getVoltage(callback) {
      this._performCachedLookup(UUID_CHAR_BATTERY, function (err, buf) {
        callback(err, buf.readUInt8(0));
      });
    }
  }]);

  return BatteryService;
}(BleService);

module.exports = {
  BatteryService: BatteryService,
  UUID: UUID_SERVICE_BATTERY,
  characteristics: {
    UUID_CHAR_BATTERY: UUID_CHAR_BATTERY
  }
};