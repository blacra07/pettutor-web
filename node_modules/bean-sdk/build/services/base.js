'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var logger = require('../util/logs').logger;

var BleService = function () {
  /**
   * Generic BLE Service and base class for all BLE BleServices
   *
   * @param characteristics
   * @param nobleService
   */

  function BleService(characteristics, nobleService) {
    _classCallCheck(this, BleService);

    this._characteristics = characteristics;
    this._nobleService = nobleService;
    this._charValueCache = {};
    this._registeredNotificationCallbacks = {};
  }

  _createClass(BleService, [{
    key: '_setupNotification',
    value: function _setupNotification(uuid, callback) {
      var _this = this;

      this._registeredNotificationCallbacks[uuid] = [];

      this._characteristics[uuid].subscribe(function (err) {
        callback(err);
      });

      this._characteristics[uuid].on('read', function (data, isNotification) {
        if (isNotification) _this._fireNotificationCallbacks(uuid, data);
      });
    }
  }, {
    key: '_fireNotificationCallbacks',
    value: function _fireNotificationCallbacks(key, data) {
      for (var i in this._registeredNotificationCallbacks[key]) {
        var cb = this._registeredNotificationCallbacks[key][i];
        cb(data);
      }
    }
  }, {
    key: '_performCachedLookup',
    value: function _performCachedLookup(key, callback) {
      var _this2 = this;

      if (this._charValueCache[key]) {
        var cachedVal = this._charValueCache[key];
        logger.info('Got cached value(' + key + '): ' + cachedVal);
        callback(null, cachedVal);
        return;
      }

      var char = this._characteristics[key];
      if (!char) {
        callback('No such characteristic: ' + key);
      } else {
        char.read(function (err, data) {
          if (err) {
            logger.info('Error reading characteristic(' + key.toString(16) + '): ' + err);
            callback(err, null);
          } else {
            _this2._charValueCache[key] = data;
            logger.info('Char read success(' + key.toString(16) + '): ' + data);
            callback(null, data);
          }
        });
      }
    }
  }, {
    key: 'resetCache',
    value: function resetCache() {
      this._charValueCache = {};
    }
  }, {
    key: 'setup',
    value: function setup(callback) {
      callback(null); // No error
    }
  }, {
    key: 'getName',
    value: function getName() {
      return this._nobleService.name === null ? 'Unknown' : this._nobleService.name;
    }
  }, {
    key: 'getUUID',
    value: function getUUID() {
      return this._nobleService.uuid;
    }
  }, {
    key: 'getCharacteristics',
    value: function getCharacteristics() {
      return this._characteristics;
    }
  }, {
    key: 'registerForNotifications',
    value: function registerForNotifications(key, cb) {
      /**
       * Register to be called-back on receipt of a notification
       *
       * @param key The characteristic UUID
       * @param cb Function to be called back
       */

      this._registeredNotificationCallbacks[key].push(cb);
    }
  }]);

  return BleService;
}();

module.exports = BleService;